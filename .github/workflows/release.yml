name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version (e.g., v0.1.0-beta). Auto-increment patch if omitted."
        required: false
        default: ""
      dist_tag:
        description: "npm dist-tag (e.g., latest, beta)."
        required: false
        default: "beta"

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    concurrency:
      group: release-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js (act)
        if: ${{ env.ACT == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org/'

      - name: Setup Node.js
        if: ${{ env.ACT != 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies (act)
        if: ${{ env.ACT == 'true' }}
        run: pnpm install --no-frozen-lockfile

      - name: Install dependencies
        if: ${{ env.ACT != 'true' }}
        run: pnpm install --frozen-lockfile

      - name: Compile contracts
        if: ${{ env.ACT != 'true' }}
        run: pnpm hardhat compile
        env:
          SKIP_HARDHAT_TASKS: "true"

      - name: Run tests
        if: ${{ env.ACT != 'true' }}
        run: pnpm test
        env:
          SKIP_HARDHAT_TASKS: "true"

      - name: Compute version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          INPUT_VERSION="${{ github.event.inputs.version }}"
          CHANNEL="${{ github.event.inputs.dist_tag }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          if [ -n "$INPUT_VERSION" ]; then
            echo "version=$INPUT_VERSION" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "$CHANNEL" != "latest" ] && [ -n "$CHANNEL" ]; then
            BASE_VERSION=$(node -p "require('./package.json').version")
            NEXT="v${BASE_VERSION}-${CHANNEL}.${SHORT_SHA}"
            echo "version=$NEXT" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          LATEST=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n 1 || true)
          if [ -z "$LATEST" ]; then
            BASE_VERSION=$(node -p "require('./package.json').version")
            NEXT="v${BASE_VERSION}"
          else
            BASE=${LATEST#v}
            NEXT="v$(npx --yes semver -i patch "$BASE")"
          fi
          echo "version=$NEXT" >> "$GITHUB_OUTPUT"

      - name: Update package version
        run: pnpm version "$(echo "${{ steps.version.outputs.version }}" | sed 's/^v//')" --no-git-tag-version

      - name: Build
        run: pnpm run build

      - name: Ensure version not already on npm
        if: ${{ env.ACT != 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          PKG_NAME=$(node -p "require('./package.json').name")
          VERSION=$(echo "${{ steps.version.outputs.version }}" | sed 's/^v//')
          if npm view "$PKG_NAME@$VERSION" version >/dev/null 2>&1; then
            echo "Version $VERSION is already published to npm. Aborting."
            exit 1
          fi

      - name: Publish to npm
        if: ${{ env.ACT != 'true' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          pnpm publish --tag "${{ github.event.inputs.dist_tag }}" --access public --provenance --no-git-checks

      - name: Commit version bump
        if: ${{ env.ACT != 'true' }}
        env:
          VERSION: ${{ steps.version.outputs.version }}
          BRANCH: ${{ github.ref_name }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        shell: bash
        run: |
          set -euo pipefail
          git add package.json pnpm-lock.yaml || true
          if git diff --cached --quiet; then
            echo "No version changes to commit"
          else
            git commit -m "chore(release): $VERSION [skip ci]"
            git push origin HEAD:refs/heads/$BRANCH
          fi

      - name: Ensure git tag does not already exist
        if: ${{ env.ACT != 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.version.outputs.version }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            echo "Git tag $TAG already exists locally."
            exit 1
          fi
          if git ls-remote --tags origin "refs/tags/$TAG" | grep -q .; then
            echo "Git tag $TAG already exists on origin."
            exit 1
          fi

      - name: Create git tag
        if: ${{ env.ACT != 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.version }}"

      - name: Create GitHub release
        if: ${{ env.ACT != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          PRERELEASE_FLAG=""
          if [[ "${{ github.event.inputs.dist_tag }}" != "latest" && -n "${{ github.event.inputs.dist_tag }}" ]]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          gh release create "${{ steps.version.outputs.version }}" \
            --title "${{ steps.version.outputs.version }}" \
            --generate-notes $PRERELEASE_FLAG
